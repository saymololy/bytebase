lexer grammar GoogleSQLLexer;

options {
	caseInsensitive = true;
}

fragment A: [a];
fragment B: [b];
fragment C: [c];
fragment D: [d];
fragment E: [e];
fragment F: [f];
fragment G: [g];
fragment H: [h];
fragment I: [i];
fragment J: [j];
fragment K: [k];
fragment L: [l];
fragment M: [m];
fragment N: [n];
fragment O: [o];
fragment P: [p];
fragment Q: [q];
fragment R: [r];
fragment S: [s];
fragment T: [t];
fragment U: [u];
fragment V: [v];
fragment W: [w];
fragment X: [x];
fragment Y: [y];
fragment Z: [z];

EQUAL_OPERATOR: '=';
NOT_EQUAL_OPERATOR: '!=';
NOT_EQUAL2_OPERATOR: '<>';
LT_OPERATOR: '<';
LE_OPERATOR: '<=';
GT_OPERATOR: '>';
GE_OPERATOR: '>=';
KL_OPERATOR: '<<';
KR_OPERATOR: '>>';
PLUS_OPERATOR: '+';
MINUS_OPERATOR: '-';
MULTIPLY_OPERATOR: '*';
DIVIDE_OPERATOR: '/';
BITWISE_NOT_OPERATOR: '~';
EXCLAMATION_OPERATOR: '!';
MODULO_OPERATOR: '%';

COMMA_SYMBOL: ',';
DOT_SYMBOL: '.';
LC_BRACKET_SYMBOL: '{';
RC_BRACKET_SYMBOL: '}';
LR_BRACKET_SYMBOL: '(';
RR_BRACKET_SYMBOL: ')';
LS_BRACKET_SYMBOL: '[';
RS_BRACKET_SYMBOL: ']';
STROKE_SYMBOL: '|';
COLON_SYMBOL: ':';
SEMI_SYMBOL: ';';
SINGLE_QUOTE_SYMBOL: '\'';
SINGLE_QUOTE_3_SYMBOL: '\'\'\'';
DOUBLE_QUOTE_SYMBOL: '"';
DOUBLE_QUOTE_3_SYMBOL: '"""';
BACKQUOTE_SYMBOL: '`';
QUESTION_SYMBOL: '?';
AT_SYMBOL: '@';
ATAT_SYMBOL: '@@';
EQUAL_GT_BRACKET_SYMBOL: '=>';
SUB_GT_BRACKET_SYMBOL: '->';
PLUS_EQUAL_SYMBOL: '+=';
SUB_EQUAL_SYMBOL: '-=';
PIPE_SYMBOL: '|>';
CIRCUMFLEX_SYMBOL: '^';
BIT_AND_SYMBOL: '&';
BOOL_OR_SYMBOL: '||';

fragment ANY_ESCAPE:
	'\\' .
	| '\\' '\n'
	| '\\' '\r'
	| '\\' '\r' '\n';
fragment NO_BACKSLASH_SINGLE_QUOTE_NEWLINE: ~['\n\r\\];
fragment NO_BACKSLASH_DOUBLE_QUOTE_NEWLINE: ~["\n\r\\];
fragment NO_BACKSLASH_SINGLE_QUOTE: ~['\\];
fragment NO_BACKSLASH_DOUBLE_QUOTE: ~["\\];

// Strings and bytes, comes from https://github.com/google/zetasql/blob/194cd32b5d766d60e3ca442651d792c7fe54ea74/zetasql/parser/flex_tokenizer.l#L112
fragment SQTEXT_0:
	SINGLE_QUOTE_SYMBOL (
		NO_BACKSLASH_SINGLE_QUOTE_NEWLINE
		| ANY_ESCAPE
	)*;
fragment SQTEXT: SQTEXT_0 SINGLE_QUOTE_SYMBOL;
fragment DQTEXT_0:
	DOUBLE_QUOTE_SYMBOL (
		NO_BACKSLASH_DOUBLE_QUOTE_NEWLINE
		| ANY_ESCAPE
	)*;
fragment DQTEXT: DQTEXT_0 DOUBLE_QUOTE_SYMBOL;
fragment SQ3TEXT_0:
	SINGLE_QUOTE_3_SYMBOL (
		(SINGLE_QUOTE_SYMBOL SINGLE_QUOTE_SYMBOL?)? (
			NO_BACKSLASH_SINGLE_QUOTE
			| ANY_ESCAPE
		)
	)*;
fragment SQ3TEXT: SQ3TEXT_0 SINGLE_QUOTE_3_SYMBOL;

fragment DQ3TEXT_0:
	DOUBLE_QUOTE_3_SYMBOL (
		(DOUBLE_QUOTE_SYMBOL DOUBLE_QUOTE_SYMBOL?)? (
			NO_BACKSLASH_DOUBLE_QUOTE
			| ANY_ESCAPE
		)
	)*;
fragment DQ3TEXT: DQ3TEXT_0 DOUBLE_QUOTE_3_SYMBOL;

// String literal
STRING_LITERAL: R? ( SQTEXT | DQTEXT | SQ3TEXT | DQ3TEXT);

// Bytes literal
BYTES_LITERAL: (B | R B | B R) (
		SQTEXT
		| DQTEXT
		| SQ3TEXT
		| DQ3TEXT
	);

UNCLOSED_STRING_LITERAL: (SQTEXT_0 | DQTEXT_0);

UNCLOSED_TRIPLE_QUOTED_STRING_LITERAL: (SQ3TEXT_0 | DQ3TEXT_0);

UNCLOSED_RAW_STRING_LITERAL: R (SQTEXT_0 | DQTEXT_0);

UNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL:
	R (SQ3TEXT_0 | DQ3TEXT_0);

UNCLOSED_BYTES_LITERAL: B (SQTEXT_0 | DQTEXT_0);

UNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL: B (SQ3TEXT_0 | DQ3TEXT_0);

UNCLOSED_RAW_BYTES_LITERAL: (R B | B R) (SQTEXT_0 | DQTEXT_0);

UNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL: (R B | B R) (
		SQ3TEXT_0
		| DQ3TEXT_0
	);

FLOATING_POINT_LITERAL: (PLUS_OPERATOR | MINUS_OPERATOR)? DECIMAL_DIGITS DOT_SYMBOL DECIMAL_DIGITS?
		(
		'E' (PLUS_OPERATOR | MINUS_OPERATOR)? DECIMAL_DIGITS
	)?
	| (PLUS_OPERATOR | MINUS_OPERATOR)? DECIMAL_DIGITS? DOT_SYMBOL DECIMAL_DIGITS (
		'E' (PLUS_OPERATOR | MINUS_OPERATOR)? DECIMAL_DIGITS
	)?
	| DECIMAL_DIGITS 'E' (PLUS_OPERATOR | MINUS_OPERATOR)? DECIMAL_DIGITS;

INTEGER_LITERAL: DECIMAL_DIGITS | HEX_DIGITS;
fragment DECIMAL_DIGIT: [0-9];
fragment HEX_DIGIT: [0-9a-f];
fragment DECIMAL_DIGITS: DECIMAL_DIGIT+;
fragment HEX_DIGITS: '0x' HEX_DIGIT+;

ARRAY_SYMBOL: 'ARRAY';
ALL_SYMBOL: 'ALL';
AS_SYMBOL: 'AS';
ASC_SYMBOL: 'ASC';
BY_SYMBOL: 'BY';
CROSS_SYMBOL: 'CROSS';
JOIN_SYMBOL: 'JOIN';
DELTA_SYMBOL: 'DELTA';
DESC_SYMBOL: 'DESC';
DIFFERENTIAL_PRIVACY_SYMBOL: 'DIFFERENTIAL_PRIVACY';
DISTINCT_SYMBOL: 'DISTINCT';
EPSILON_SYMBOL: 'EPSILON';
EXCEPT_SYMBOL: 'EXCEPT';
EXCLUDE_SYMBOL: 'EXCLUDE';
FOR_SYMBOL: 'FOR';
FROM_SYMBOL: 'FROM';
FULL_SYMBOL: 'FULL';
IN_SYMBOL: 'IN';
INCLUDE_SYMBOL: 'INCLUDE';
INNER_SYMBOL: 'INNER';
INTERSECT_SYMBOL: 'INTERSECT';
LEFT_SYMBOL: 'LEFT';
LIMIT_SYMBOL: 'LIMIT';
MAX_GROUPS_CONTRIBUTED_SYMBOL: 'MAX_GROUPS_CONTRIBUTED';
NULL_SYMBOL: 'NULL';
NULLS_SYMBOL: 'NULLS';
OF_SYMBOL: 'OF';
OFFSET_SYMBOL: 'OFFSET';
ON_SYMBOL: 'ON';
OPTIONS_SYMBOL: 'OPTIONS';
ORDER_SYMBOL: 'ORDER';
OUTER_SYMBOL: 'OUTER';
PERCENT_SYMBOL: 'PERCENT';
PIVOT_SYMBOL: 'PIVOT';
PRIVACY_UNIT_COLUMN_SYMBOL: 'PRIVACY_UNIT_COLUMN';
RIGHT_SYMBOL: 'RIGHT';
RECURSIVE_SYMBOL: 'RECURSIVE';
REPLACE_SYMBOL: 'REPLACE';
UNPIVOT_SYMBOL: 'UNPIVOT';
SELECT_SYMBOL: 'SELECT';
STRUCT_SYMBOL: 'STRUCT';
SYSTEM_SYMBOL: 'SYSTEM';
SYSTEM_TIME_SYMBOL: 'SYSTEM_TIME';
TABLESAMPLE_SYMBOL: 'TABLESAMPLE';
UNION_SYMBOL: 'UNION';
UNNEST_SYMBOL: 'UNNEST';
USING_SYMBOL: 'USING';
VALUE_SYMBOL: 'VALUE';
WITH_SYMBOL: 'WITH';
TRUE_SYMBOL: 'TRUE';
FALSE_SYMBOL: 'FALSE';
NUMERIC_SYMBOL: 'NUMERIC';
DECIMAL_SYMBOL: 'DECIMAL';
BIGNUMERIC_SYMBOL: 'BIGNUMERIC';
BIGDECIMAL_SYMBOL: 'BIGDECIMAL';
NOT_SYMBOL: 'NOT';
AND_SYMBOL: 'AND';
OR_SYMBOL: 'OR';
JSON_SYMBOL: 'JSON';
DATE_SYMBOL: 'DATE';
TIME_SYMBOL: 'TIME';
DATETIME_SYMBOL: 'DATETIME';
TIMESTAMP_SYMBOL: 'TIMESTAMP';
RANGE_SYMBOL: 'RANGE';
INTERVAL_SYMBOL: 'INTERVAL';
SIMPLE_SYMBOL: 'SIMPLE';
ABORT_SYMBOL: 'ABORT';
ACCESS_SYMBOL: 'ACCESS';
ACTION_SYMBOL: 'ACTION';
AGGREGATE_SYMBOL: 'AGGREGATE';
ADD_SYMBOL: 'ADD';
ALTER_SYMBOL: 'ALTER';
ALWAYS_SYMBOL: 'ALWAYS';
ANALYZE_SYMBOL: 'ANALYZE';
APPROX_SYMBOL: 'APPROX';
ARE_SYMBOL: 'ARE';
ASSERT_SYMBOL: 'ASSERT';
BATCH_SYMBOL: 'BATCH';
BEGIN_SYMBOL: 'BEGIN';
BREAK_SYMBOL: 'BREAK';
CALL_SYMBOL: 'CALL';
CASCADE_SYMBOL: 'CASCADE';
CHECK_SYMBOL: 'CHECK';
CLAMPED_SYMBOL: 'CLAMPED';
CLONE_SYMBOL: 'CLONE';
COPY_SYMBOL: 'COPY';
CLUSTER_SYMBOL: 'CLUSTER';
COLUMN_SYMBOL: 'COLUMN';
COLUMNS_SYMBOL: 'COLUMNS';
COMMIT_SYMBOL: 'COMMIT';
CONNECTION_SYMBOL: 'CONNECTION';
CONSTANT_SYMBOL: 'CONSTANT';
CONSTRAINT_SYMBOL: 'CONSTRAINT';
CONTINUE_SYMBOL: 'CONTINUE';
CORRESPONDING_SYMBOL: 'CORRESPONDING';
CYCLE_SYMBOL: 'CYCLE';
DATA_SYMBOL: 'DATA';
DATABASE_SYMBOL: 'DATABASE';
DECLARE_SYMBOL: 'DECLARE';
DEFINER_SYMBOL: 'DEFINER';
DELETE_SYMBOL: 'DELETE';
DELETION_SYMBOL: 'DELETION';
DEPTH_SYMBOL: 'DEPTH';
DESCRIBE_SYMBOL: 'DESCRIBE';
DETERMINISTIC_SYMBOL: 'DETERMINISTIC';
DO_SYMBOL: 'DO';
DROP_SYMBOL: 'DROP';
ELSEIF_SYMBOL: 'ELSEIF';
ENFORCED_SYMBOL: 'ENFORCED';
ERROR_SYMBOL: 'ERROR';
EXCEPTION_SYMBOL: 'EXCEPTION';
EXECUTE_SYMBOL: 'EXECUTE';
EXPLAIN_SYMBOL: 'EXPLAIN';
EXPORT_SYMBOL: 'EXPORT';
EXTEND_SYMBOL: 'EXTEND';
EXTERNAL_SYMBOL: 'EXTERNAL';
FILES_SYMBOL: 'FILES';
FILTER_SYMBOL: 'FILTER';
FILL_SYMBOL: 'FILL';
FIRST_SYMBOL: 'FIRST';
FOREIGN_SYMBOL: 'FOREIGN';
FORMAT_SYMBOL: 'FORMAT';
FUNCTION_SYMBOL: 'FUNCTION';
GENERATED_SYMBOL: 'GENERATED';
GRANT_SYMBOL: 'GRANT';
GROUP_ROWS_SYMBOL: 'GROUP_ROWS';
HIDDEN_SYMBOL: 'HIDDEN';
IDENTITY_SYMBOL: 'IDENTITY';
IMMEDIATE_SYMBOL: 'IMMEDIATE';
IMMUTABLE_SYMBOL: 'IMMUTABLE';
IMPORT_SYMBOL: 'IMPORT';
INCREMENT_SYMBOL: 'INCREMENT';
INDEX_SYMBOL: 'INDEX';
INOUT_SYMBOL: 'INOUT';
INPUT_SYMBOL: 'INPUT';
INSERT_SYMBOL: 'INSERT';
INVOKER_SYMBOL: 'INVOKER';
ISOLATION_SYMBOL: 'ISOLATION';
ITERATE_SYMBOL: 'ITERATE';
KEY_SYMBOL: 'KEY';
LANGUAGE_SYMBOL: 'LANGUAGE';
LAST_SYMBOL: 'LAST';
LEAVE_SYMBOL: 'LEAVE';
LEVEL_SYMBOL: 'LEVEL';
LOAD_SYMBOL: 'LOAD';
LOOP_SYMBOL: 'LOOP';
MACRO_SYMBOL: 'MACRO';
MAP_SYMBOL: 'MAP';
MATCH_SYMBOL: 'MATCH';
KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL:
	'KW_MATCH_RECOGNIZE_NONRESERVED';
MATCHED_SYMBOL: 'MATCHED';
MATERIALIZED_SYMBOL: 'MATERIALIZED';
MAX_SYMBOL: 'MAX';
MAXVALUE_SYMBOL: 'MAXVALUE';
MEASURES_SYMBOL: 'MEASURES';
MESSAGE_SYMBOL: 'MESSAGE';
METADATA_SYMBOL: 'METADATA';
MIN_SYMBOL: 'MIN';
MINVALUE_SYMBOL: 'MINVALUE';
MODEL_SYMBOL: 'MODEL';
MODULE_SYMBOL: 'MODULE';
ONLY_SYMBOL: 'ONLY';
OUT_SYMBOL: 'OUT';
OUTPUT_SYMBOL: 'OUTPUT';
OVERWRITE_SYMBOL: 'OVERWRITE';
PARTITIONS_SYMBOL: 'PARTITIONS';
PATTERN_SYMBOL: 'PATTERN';
POLICIES_SYMBOL: 'POLICIES';
POLICY_SYMBOL: 'POLICY';
PRIMARY_SYMBOL: 'PRIMARY';
PRIVATE_SYMBOL: 'PRIVATE';
PRIVILEGE_SYMBOL: 'PRIVILEGE';
PRIVILEGES_SYMBOL: 'PRIVILEGES';
PROCEDURE_SYMBOL: 'PROCEDURE';
PROJECT_SYMBOL: 'PROJECT';
PUBLIC_SYMBOL: 'PUBLIC';
RAISE_SYMBOL: 'RAISE';
READ_SYMBOL: 'READ';
REFERENCES_SYMBOL: 'REFERENCES';
REMOTE_SYMBOL: 'REMOTE';
REMOVE_SYMBOL: 'REMOVE';
RENAME_SYMBOL: 'RENAME';
REPEAT_SYMBOL: 'REPEAT';
REPEATABLE_SYMBOL: 'REPEATABLE';
REPLACE_FIELDS_SYMBOL: 'REPLACE_FIELDS';
REPLICA_SYMBOL: 'REPLICA';
REPORT_SYMBOL: 'REPORT';
RESTRICT_SYMBOL: 'RESTRICT';
RESTRICTION_SYMBOL: 'RESTRICTION';
RETURNS_SYMBOL: 'RETURNS';
RETURN_SYMBOL: 'RETURN';
REVOKE_SYMBOL: 'REVOKE';
ROLLBACK_SYMBOL: 'ROLLBACK';
ROW_SYMBOL: 'ROW';
RUN_SYMBOL: 'RUN';
SAFE_CAST_SYMBOL: 'SAFE_CAST';
SCHEMA_SYMBOL: 'SCHEMA';
SEARCH_SYMBOL: 'SEARCH';
SECURITY_SYMBOL: 'SECURITY';
SEQUENCE_SYMBOL: 'SEQUENCE';
SETS_SYMBOL: 'SETS';
SET_SYMBOL: 'SET';
SHOW_SYMBOL: 'SHOW';
SNAPSHOT_SYMBOL: 'SNAPSHOT';
SOURCE_SYMBOL: 'SOURCE';
SQL_SYMBOL: 'SQL';
STABLE_SYMBOL: 'STABLE';
START_SYMBOL: 'START';
STATIC_DESCRIBE_SYMBOL: 'STATIC_DESCRIBE';
STORED_SYMBOL: 'STORED';
STORING_SYMBOL: 'STORING';
STRICT_SYMBOL: 'STRICT';
TABLE_SYMBOL: 'TABLE';
TABLES_SYMBOL: 'TABLES';
TARGET_SYMBOL: 'TARGET';
TEMP_SYMBOL: 'TEMP';
TEMPORARY_SYMBOL: 'TEMPORARY';
TRANSACTION_SYMBOL: 'TRANSACTION';
TRANSFORM_SYMBOL: 'TRANSFORM';
TRUNCATE_SYMBOL: 'TRUNCATE';
TYPE_SYMBOL: 'TYPE';
UNDROP_SYMBOL: 'UNDROP';
UNIQUE_SYMBOL: 'UNIQUE';
UNKNOWN_SYMBOL: 'UNKNOWN';
UNTIL_SYMBOL: 'UNTIL';
UPDATE_SYMBOL: 'UPDATE';
VALUES_SYMBOL: 'VALUES';
VECTOR_SYMBOL: 'VECTOR';
VIEW_SYMBOL: 'VIEW';
VIEWS_SYMBOL: 'VIEWS';
VOLATILE_SYMBOL: 'VOLATILE';
WEIGHT_SYMBOL: 'WEIGHT';
WHILE_SYMBOL: 'WHILE';
WRITE_SYMBOL: 'WRITE';
ZONE_SYMBOL: 'ZONE';
DESCRIPTOR_SYMBOL: 'DESCRIPTOR';
INTERLEAVE_SYMBOL: 'INTERLEAVE';
NULL_FILTERED_SYMBOL: 'NULL_FILTERED';
PARENT_SYMBOL: 'PARENT';
NEW_SYMBOL: 'NEW';
END_SYMBOL: 'END';
CASE_SYMBOL: 'CASE';
WHEN_SYMBOL: 'WHEN';
THEN_SYMBOL: 'THEN';
ELSE_SYMBOL: 'ELSE';
CAST_SYMBOL: 'CAST';
EXTRACT_SYMBOL: 'EXTRACT';
COLLATE_SYMBOL: 'COLLATE';
IF_SYMBOL: 'IF';
GROUPING_SYMBOL: 'GROUPING';
HAVING_SYMBOL: 'HAVING';
GROUP_SYMBOL: 'GROUP';
ROLLUP_SYMBOL: 'ROLLUP';
CUBE_SYMBOL: 'CUBE';
HASH_SYMBOL: 'HASH';
PROTO_SYMBOL: 'PROTO';
PARTITION_SYMBOL: 'PARTITION';
IGNORE_SYMBOL: 'IGNORE';
RESPECT_SYMBOL: 'RESPECT';
ROWS_SYMBOL: 'ROWS';
OVER_SYMBOL: 'OVER';
BETWEEN_SYMBOL: 'BETWEEN';
UNBOUNDED_SYMBOL: 'UNBOUNDED';
CURRENT_SYMBOL: 'CURRENT';
PRECEDING_SYMBOL: 'PRECEDING';
FOLLOWING_SYMBOL: 'FOLLOWING';
NATURAL_SYMBOL: 'NATURAL';
QUALIFY_SYMBOL: 'QUALIFY';
DEFAULT_SYMBOL: 'DEFAULT';
SLASH_SYMBOL: 'SLASH';
MATCH_RECOGNIZE_SYMBOL: 'MATCH_RECOGNIZE';
DEFINE_SYMBOL: 'DEFINE';
LOOKUP_SYMBOL: 'LOOKUP';
WHERE_SYMBOL: 'WHERE';
WINDOW_SYMBOL: 'WINDOW';
TO_SYMBOL: 'TO';
EXISTS_SYMBOL: 'EXISTS';
ANY_SYMBOL: 'ANY';
SOME_SYMBOL: 'SOME';
LIKE_SYMBOL: 'LIKE';
IS_SYMBOL: 'IS';
NO_SYMBOL: 'NO';
INTO_SYMBOL: 'INTO';
ASSERT_ROWS_MODIFIED_SYMBOL: 'ASSERT_ROWS_MODIFIED';
CONFLICT_SYMBOL: 'CONFLICT';
NOTHING_SYMBOL: 'NOTHING';
MERGE_SYMBOL: 'MERGE';
CREATE_SYMBOL: 'CREATE';
ENUM_SYMBOL: 'ENUM';
DESTINATION_SYMBOL: 'DESTINATION';
PROPERTY_SYMBOL: 'PROPERTY';
GRAPH_SYMBOL: 'GRAPH';
NODE_SYMBOL: 'NODE';
PROPERTIES_SYMBOL: 'PROPERTIES';
LABEL_SYMBOL: 'LABEL';
EDGE_SYMBOL: 'EDGE';
NEXT_SYMBOL: 'NEXT';
ASCENDING_SYMBOL: 'ASCENDING';
DESCENDING_SYMBOL: 'DESCENDING';
SKIP_SYMBOL: 'SKIP';
SHORTEST_SYMBOL: 'SHORTEST';
PATH_SYMBOL: 'PATH';
PATHS_SYMBOL: 'PATHS';
WALK_SYMBOL: 'WALK';
TRAIL_SYMBOL: 'TRAIL';
ACYCLIC_SYMBOL: 'ACYCLIC';
OPTIONAL_SYMBOL: 'OPTIONAL';
LET_SYMBOL: 'LET';

/* Identifiers: */
fragment EXPONENT_WITHOUT_SIGN: E [0-9]+;
fragment UNQUOTED_IDENTIFIER: [A-Z_][A-Z0-9_]*;
fragment BQTEXT_0:
	BACKQUOTE_SYMBOL ((~[\\`\r\n]) | (ANY_ESCAPE))*;
fragment BQTEXT: BQTEXT_0 BACKQUOTE_SYMBOL;
IDENTIFIER: UNQUOTED_IDENTIFIER | BQTEXT;
UNCLOSED_ESCAPED_IDENTIFIER: BQTEXT_0;

// White space handling
WHITESPACE:
	[ \t\f\r\n] -> channel(HIDDEN); // Ignore whitespaces.

// Comments
fragment BLOCK_COMMENT: ('/**/' | '/*' ~[!] .*? '*/');

fragment DASH_COMMENT: '--' (~[\r\n])* ('\r' | '\n' | '\r\n')?;

fragment POUND_COMMENT: '#' (~[\r\n])* ('\r' | '\n' | '\r\n')?;

COMMENT:
	(BLOCK_COMMENT | DASH_COMMENT | POUND_COMMENT) -> channel(HIDDEN);